// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// Delete provides a mock function with given fields: path, handler
func (_m *Router) Delete(path string, handler func(http.ResponseWriter, *http.Request)) {
	_m.Called(path, handler)
}

// Get provides a mock function with given fields: path, handlerFunc
func (_m *Router) Get(path string, handlerFunc func(http.ResponseWriter, *http.Request)) {
	_m.Called(path, handlerFunc)
}

// Name provides a mock function with given fields:
func (_m *Router) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Post provides a mock function with given fields: path, handler
func (_m *Router) Post(path string, handler func(http.ResponseWriter, *http.Request)) {
	_m.Called(path, handler)
}

// Put provides a mock function with given fields: path, handler
func (_m *Router) Put(path string, handler func(http.ResponseWriter, *http.Request)) {
	_m.Called(path, handler)
}

// Serve provides a mock function with given fields: addr
func (_m *Router) Serve(addr string) error {
	ret := _m.Called(addr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRouter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRouter(t mockConstructorTestingTNewRouter) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
