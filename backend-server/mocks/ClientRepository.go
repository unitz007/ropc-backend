// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "ropc-service/model/entities"

	mock "github.com/stretchr/testify/mock"
)

// ClientRepository is an autogenerated mock type for the ClientRepository type
type ClientRepository struct {
	mock.Mock
}

// CreateClient provides a mock function with given fields: client
func (_m *ClientRepository) CreateClient(client *entities.Client) error {
	ret := _m.Called(client)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Client) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClient provides a mock function with given fields: clientId
func (_m *ClientRepository) GetClient(clientId string) (*entities.Client, error) {
	ret := _m.Called(clientId)

	var r0 *entities.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Client, error)); ok {
		return rf(clientId)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Client); ok {
		r0 = rf(clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClients provides a mock function with given fields:
func (_m *ClientRepository) GetClients() []entities.Client {
	ret := _m.Called()

	var r0 []entities.Client
	if rf, ok := ret.Get(0).(func() []entities.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Client)
		}
	}

	return r0
}

type mockConstructorTestingTNewClientRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientRepository creates a new instance of ClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientRepository(t mockConstructorTestingTNewClientRepository) *ClientRepository {
	mock := &ClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
