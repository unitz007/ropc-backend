// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "ropc-service/model/entities"

	mock "github.com/stretchr/testify/mock"

	user "os/user"
)

// AuthenticationServiceContract is an autogenerated mock type for the AuthenticationServiceContract type
type AuthenticationServiceContract struct {
	mock.Mock
}

// ClientAuthentication provides a mock function with given fields: client
func (_m *AuthenticationServiceContract) ClientAuthentication(client model.Client) error {
	ret := _m.Called(client)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Client) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAuthentication provides a mock function with given fields: _a0
func (_m *AuthenticationServiceContract) UserAuthentication(_a0 user.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthenticationServiceContract interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticationServiceContract creates a new instance of AuthenticationServiceContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticationServiceContract(t mockConstructorTestingTNewAuthenticationServiceContract) *AuthenticationServiceContract {
	mock := &AuthenticationServiceContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
