// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

// PanicHandler provides a mock function with given fields: h
func (_m *Middleware) PanicHandler(h func(http.ResponseWriter, *http.Request)) func(http.ResponseWriter, *http.Request) {
	ret := _m.Called(h)

	if len(ret) == 0 {
		panic("no return value specified for PanicHandler")
	}

	var r0 func(http.ResponseWriter, *http.Request)
	if rf, ok := ret.Get(0).(func(func(http.ResponseWriter, *http.Request)) func(http.ResponseWriter, *http.Request)); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.ResponseWriter, *http.Request))
		}
	}

	return r0
}

// RequestLogging provides a mock function with given fields: h
func (_m *Middleware) RequestLogging(h func(http.ResponseWriter, *http.Request)) func(http.ResponseWriter, *http.Request) {
	ret := _m.Called(h)

	if len(ret) == 0 {
		panic("no return value specified for RequestLogging")
	}

	var r0 func(http.ResponseWriter, *http.Request)
	if rf, ok := ret.Get(0).(func(func(http.ResponseWriter, *http.Request)) func(http.ResponseWriter, *http.Request)); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.ResponseWriter, *http.Request))
		}
	}

	return r0
}

// NewMiddleware creates a new instance of Middleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *Middleware {
	mock := &Middleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
