// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "ropc-service/model"

	mock "github.com/stretchr/testify/mock"
)

// UserAuthenticatorContract is an autogenerated mock type for the UserAuthenticatorContract type
type UserAuthenticatorContract struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: username, password
func (_m *UserAuthenticatorContract) Authenticate(username string, password string) (*model.User, error) {
	ret := _m.Called(username, password)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.User, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserAuthenticatorContract interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserAuthenticatorContract creates a new instance of UserAuthenticatorContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserAuthenticatorContract(t mockConstructorTestingTNewUserAuthenticatorContract) *UserAuthenticatorContract {
	mock := &UserAuthenticatorContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
