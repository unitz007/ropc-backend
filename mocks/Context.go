// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	kernel "ropc-backend/kernel"

	mock "github.com/stretchr/testify/mock"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

// Database provides a mock function with given fields:
func (_m *Context) Database() kernel.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 kernel.Database
	if rf, ok := ret.Get(0).(func() kernel.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kernel.Database)
		}
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *Context) Logger() kernel.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 kernel.Logger
	if rf, ok := ret.Get(0).(func() kernel.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kernel.Logger)
		}
	}

	return r0
}

// Router provides a mock function with given fields:
func (_m *Context) Router() kernel.Router {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Router")
	}

	var r0 kernel.Router
	if rf, ok := ret.Get(0).(func() kernel.Router); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kernel.Router)
		}
	}

	return r0
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
