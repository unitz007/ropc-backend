// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository[Model interface{}] struct {
	mock.Mock
}

// Create provides a mock function with given fields: model
func (_m *Repository[Model]) Create(model Model) error {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Model) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: conditions
func (_m *Repository[Model]) Delete(conditions string) error {
	ret := _m.Called(conditions)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(conditions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: conditions
func (_m *Repository[Model]) Get(conditions string) (*Model, error) {
	ret := _m.Called(conditions)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Model, error)); ok {
		return rf(conditions)
	}
	if rf, ok := ret.Get(0).(func(string) *Model); ok {
		r0 = rf(conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: conditions
func (_m *Repository[Model]) GetAll(conditions string) []Model {
	ret := _m.Called(conditions)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []Model
	if rf, ok := ret.Get(0).(func(string) []Model); ok {
		r0 = rf(conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Model)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, fields
func (_m *Repository[Model]) Update(id uint, fields map[string]interface{}) error {
	ret := _m.Called(id, fields)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) error); ok {
		r0 = rf(id, fields)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository[Model interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository[Model] {
	mock := &Repository[Model]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
